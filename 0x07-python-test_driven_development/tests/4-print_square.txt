============================
How to Use 4-print_square.py
============================

This module introduces a square-printing function called ``print_square(size)``.

Usage
=====

The square is printed using the ``#`` character, and the parameter ``size`` determines both the height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(2)
    ##
    ##

::

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

::

    >>> print_square(8)
    ########
    ########
    ########
    ########
    ########
    ########
    ########
    ########

If the ``size`` is set to zero, the function will print nothing.

::

    >>> print_square(0)

Invalid Sizes
=============

It's important to note that the parameter ``size`` must be an integer; otherwise, a TypeError will be raised.

::

    >>> print_square("not a number")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(4.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

If ``size`` is less than zero, a ValueError will be raised.

::

    >>> print_square(-3)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Please keep in mind that type-checking occurs before value-checking.

::

    >>> print_square(-3.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

You must provide at least one argument.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
